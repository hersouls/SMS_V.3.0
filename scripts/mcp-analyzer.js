#!/usr/bin/env node

/**
 * MCP ÌÜµÌï© Î∂ÑÏÑù ÎèÑÍµ¨
 * ÌîÑÎ°úÏ†ùÌä∏Ïùò Ï†ÑÎ∞òÏ†ÅÏù∏ ÏÉÅÌÉúÎ•º Î∂ÑÏÑùÌïòÍ≥† Í∞úÏÑ† Î∞©ÏïàÏùÑ Ï†úÏãúÌï©ÎãàÎã§.
 */

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

class MCPAnalyzer {
  constructor() {
    this.projectRoot = process.cwd();
    this.analysisResults = {
      codeQuality: {},
      security: {},
      performance: {},
      dependencies: {},
      structure: {}
    };
  }

  async analyzeProject() {
    console.log('üîç SMS V.3.0 ÌîÑÎ°úÏ†ùÌä∏ MCP Î∂ÑÏÑù ÏãúÏûë...\n');

    try {
      await this.analyzeCodeQuality();
      await this.analyzeSecurity();
      await this.analyzePerformance();
      await this.analyzeDependencies();
      await this.analyzeStructure();
      
      this.generateReport();
    } catch (error) {
      console.error('‚ùå Î∂ÑÏÑù Ï§ë Ïò§Î•ò Î∞úÏÉù:', error.message);
      process.exit(1);
    }
  }

  async analyzeCodeQuality() {
    console.log('üìä ÏΩîÎìú ÌíàÏßà Î∂ÑÏÑù Ï§ë...');
    
    // TypeScript ÌååÏùº Î∂ÑÏÑù
    const tsFiles = this.findFiles('.ts,.tsx');
    this.analysisResults.codeQuality = {
      totalFiles: tsFiles.length,
      averageComplexity: this.calculateComplexity(tsFiles),
      maintainabilityIndex: this.calculateMaintainability(tsFiles)
    };
  }

  async analyzeSecurity() {
    console.log('üîí Î≥¥Ïïà Î∂ÑÏÑù Ï§ë...');
    
    // npm audit Ïã§Ìñâ
    try {
      const auditResult = execSync('npm audit --json', { encoding: 'utf8' });
      const audit = JSON.parse(auditResult);
      
      this.analysisResults.security = {
        vulnerabilities: audit.metadata.vulnerabilities,
        totalDependencies: audit.metadata.totalDependencies,
        devDependencies: audit.metadata.devDependencies
      };
    } catch (error) {
      this.analysisResults.security = { error: 'npm audit Ïã§Ìñâ Ïã§Ìå®' };
    }
  }

  async analyzePerformance() {
    console.log('‚ö° ÏÑ±Îä• Î∂ÑÏÑù Ï§ë...');
    
    // Î≤àÎì§ ÌÅ¨Í∏∞ Î∂ÑÏÑù
    const distPath = path.join(this.projectRoot, 'dist');
    if (fs.existsSync(distPath)) {
      const bundleSize = this.calculateBundleSize(distPath);
      this.analysisResults.performance = {
        bundleSize,
        optimizationOpportunities: this.findOptimizationOpportunities()
      };
    }
  }

  async analyzeDependencies() {
    console.log('üì¶ ÏùòÏ°¥ÏÑ± Î∂ÑÏÑù Ï§ë...');
    
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    this.analysisResults.dependencies = {
      totalDependencies: Object.keys(packageJson.dependencies || {}).length,
      totalDevDependencies: Object.keys(packageJson.devDependencies || {}).length,
      outdatedPackages: await this.checkOutdatedPackages()
    };
  }

  async analyzeStructure() {
    console.log('üèóÔ∏è ÌîÑÎ°úÏ†ùÌä∏ Íµ¨Ï°∞ Î∂ÑÏÑù Ï§ë...');
    
    const structure = {
      components: await this.countFiles('components/**/*.tsx'),
      pages: await this.countFiles('src/**/*.tsx'),
      utils: await this.countFiles('utils/**/*.ts'),
      tests: await this.countFiles('tests/**/*.test.ts'),
      docs: await this.countFiles('docs/**/*.md')
    };
    
    this.analysisResults.structure = structure;
  }

  findFiles(extensions) {
    const files = [];
    const extensionsList = extensions.split(',');
    
    const walkDir = (dir) => {
      const items = fs.readdirSync(dir);
      items.forEach(item => {
        const fullPath = path.join(dir, item);
        const stat = fs.statSync(fullPath);
        
        if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
          walkDir(fullPath);
        } else if (stat.isFile()) {
          const ext = path.extname(item);
          if (extensionsList.includes(ext)) {
            files.push(fullPath);
          }
        }
      });
    };
    
    walkDir(this.projectRoot);
    return files;
  }

  async countFiles(pattern) {
    try {
      // glob Î™®ÎìàÏùÑ ÎèôÏ†ÅÏúºÎ°ú import
      const glob = await import('glob');
      return glob.sync(pattern).length;
    } catch {
      return 0;
    }
  }

  calculateComplexity(files) {
    // Í∞ÑÎã®Ìïú Î≥µÏû°ÎèÑ Í≥ÑÏÇ∞ (Ïã§Ï†úÎ°úÎäî Îçî Ï†ïÍµêÌïú ÎèÑÍµ¨ ÏÇ¨Ïö© Í∂åÏû•)
    let totalLines = 0;
    let totalFunctions = 0;
    
    files.forEach(file => {
      try {
        const content = fs.readFileSync(file, 'utf8');
        const lines = content.split('\n');
        totalLines += lines.length;
        
        const functionMatches = content.match(/function\s+\w+|=>\s*{|const\s+\w+\s*=\s*\(/g);
        if (functionMatches) {
          totalFunctions += functionMatches.length;
        }
      } catch (error) {
        // ÌååÏùº ÏùΩÍ∏∞ Ïã§Ìå® Ïãú Î¨¥Ïãú
      }
    });
    
    return totalLines > 0 ? (totalLines / totalFunctions).toFixed(2) : 0;
  }

  calculateMaintainability(files) {
    // Í∞ÑÎã®Ìïú Ïú†ÏßÄÎ≥¥ÏàòÏÑ± ÏßÄÏàò Í≥ÑÏÇ∞
    const avgComplexity = parseFloat(this.calculateComplexity(files));
    return Math.max(0, 100 - (avgComplexity * 10));
  }

  calculateBundleSize(distPath) {
    let totalSize = 0;
    const walkDir = (dir) => {
      const items = fs.readdirSync(dir);
      items.forEach(item => {
        const fullPath = path.join(dir, item);
        const stat = fs.statSync(fullPath);
        
        if (stat.isDirectory()) {
          walkDir(fullPath);
        } else if (stat.isFile()) {
          totalSize += stat.size;
        }
      });
    };
    
    walkDir(distPath);
    return (totalSize / 1024 / 1024).toFixed(2); // MB Îã®ÏúÑ
  }

  findOptimizationOpportunities() {
    const opportunities = [];
    
    // Î≤àÎì§ ÌÅ¨Í∏∞ ÏµúÏ†ÅÌôî Í∏∞Ìöå
    if (this.analysisResults.performance.bundleSize > 2) {
      opportunities.push('Î≤àÎì§ ÌÅ¨Í∏∞Í∞Ä 2MBÎ•º Ï¥àÍ≥ºÌï©ÎãàÎã§. ÏΩîÎìú Î∂ÑÌï†ÏùÑ Í≥†Î†§ÌïòÏÑ∏Ïöî.');
    }
    
    // ÏùòÏ°¥ÏÑ± ÏµúÏ†ÅÌôî Í∏∞Ìöå
    if (this.analysisResults.dependencies.totalDependencies > 50) {
      opportunities.push('ÏùòÏ°¥ÏÑ±Ïù¥ ÎßéÏäµÎãàÎã§. Î∂àÌïÑÏöîÌïú Ìå®ÌÇ§ÏßÄÎ•º Ï†úÍ±∞ÌïòÏÑ∏Ïöî.');
    }
    
    return opportunities;
  }

  async checkOutdatedPackages() {
    try {
      const result = execSync('npm outdated --json', { encoding: 'utf8' });
      return Object.keys(JSON.parse(result)).length;
    } catch {
      return 0; // Ïò§Î•ò Ïãú 0 Î∞òÌôò
    }
  }

  generateReport() {
    console.log('\nüìã MCP Î∂ÑÏÑù Í≤∞Í≥º Î¶¨Ìè¨Ìä∏\n');
    console.log('='.repeat(50));
    
    // ÏΩîÎìú ÌíàÏßà
    console.log('\nüìä ÏΩîÎìú ÌíàÏßà:');
    console.log(`  ‚Ä¢ Ï¥ù ÌååÏùº Ïàò: ${this.analysisResults.codeQuality.totalFiles}`);
    console.log(`  ‚Ä¢ ÌèâÍ∑† Î≥µÏû°ÎèÑ: ${this.analysisResults.codeQuality.averageComplexity}`);
    console.log(`  ‚Ä¢ Ïú†ÏßÄÎ≥¥ÏàòÏÑ± ÏßÄÏàò: ${this.analysisResults.codeQuality.maintainabilityIndex}/100`);
    
    // Î≥¥Ïïà
    console.log('\nüîí Î≥¥Ïïà ÏÉÅÌÉú:');
    if (this.analysisResults.security.vulnerabilities) {
      console.log(`  ‚Ä¢ Ï∑®ÏïΩÏ†ê: ${this.analysisResults.security.vulnerabilities.high || 0}Í∞ú (ÎÜíÏùå)`);
      console.log(`  ‚Ä¢ ÏùòÏ°¥ÏÑ±: ${this.analysisResults.security.totalDependencies}Í∞ú`);
    } else {
      console.log('  ‚Ä¢ Î≥¥Ïïà Ïä§Ï∫î ÏôÑÎ£å');
    }
    
    // ÏÑ±Îä•
    console.log('\n‚ö° ÏÑ±Îä•:');
    if (this.analysisResults.performance.bundleSize) {
      console.log(`  ‚Ä¢ Î≤àÎì§ ÌÅ¨Í∏∞: ${this.analysisResults.performance.bundleSize}MB`);
    }
    
    // ÏùòÏ°¥ÏÑ±
    console.log('\nüì¶ ÏùòÏ°¥ÏÑ±:');
    console.log(`  ‚Ä¢ ÌîÑÎ°úÎçïÏÖò ÏùòÏ°¥ÏÑ±: ${this.analysisResults.dependencies.totalDependencies}Í∞ú`);
    console.log(`  ‚Ä¢ Í∞úÎ∞ú ÏùòÏ°¥ÏÑ±: ${this.analysisResults.dependencies.totalDevDependencies}Í∞ú`);
    console.log(`  ‚Ä¢ Ïò§ÎûòÎêú Ìå®ÌÇ§ÏßÄ: ${this.analysisResults.dependencies.outdatedPackages}Í∞ú`);
    
    // Íµ¨Ï°∞
    console.log('\nüèóÔ∏è ÌîÑÎ°úÏ†ùÌä∏ Íµ¨Ï°∞:');
    console.log(`  ‚Ä¢ Ïª¥Ìè¨ÎÑåÌä∏: ${this.analysisResults.structure.components}Í∞ú`);
    console.log(`  ‚Ä¢ ÌéòÏù¥ÏßÄ: ${this.analysisResults.structure.pages}Í∞ú`);
    console.log(`  ‚Ä¢ Ïú†Ìã∏Î¶¨Ìã∞: ${this.analysisResults.structure.utils}Í∞ú`);
    console.log(`  ‚Ä¢ ÌÖåÏä§Ìä∏: ${this.analysisResults.structure.tests}Í∞ú`);
    console.log(`  ‚Ä¢ Î¨∏ÏÑú: ${this.analysisResults.structure.docs}Í∞ú`);
    
    // Í∞úÏÑ† Í∂åÏû•ÏÇ¨Ìï≠
    console.log('\nüí° Í∞úÏÑ† Í∂åÏû•ÏÇ¨Ìï≠:');
    this.analysisResults.performance.optimizationOpportunities?.forEach(opportunity => {
      console.log(`  ‚Ä¢ ${opportunity}`);
    });
    
    console.log('\n' + '='.repeat(50));
    console.log('‚úÖ MCP Î∂ÑÏÑù ÏôÑÎ£å!\n');
  }
}

// Ïã§Ìñâ
const analyzer = new MCPAnalyzer();
analyzer.analyzeProject();

export default MCPAnalyzer; 